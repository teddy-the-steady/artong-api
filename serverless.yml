service: artong-api
app: artong-api

provider:
  name: aws
  runtime: nodejs12.x
  stage: stage #prod
  region: ap-northeast-2
  environment:
    ENV: ${self:provider.stage}
    NODE_PATH: './:/opt/node_modules'

package:
 exclude:
   - node_layers/**

layers:
  NodeModules:
    path: node_layers
    description: 'includes pq, handlebars, class-validator'

plugins:
  - serverless-iam-roles-per-function
  - serverless-webpack
  - serverless-offline

custom:
  DB_CONFIG: ${file(./config.js):DB_CONFIG}

functions:
  hello:
    handler: handler.hello
    events:
     - http: GET users/hello
  artong:
    handler: artong/handler/artong.handler
    events:
     - http:
        path: artong/v1/member
        method: POST
        cors: true
     - http:
        path: artong/v1/memberMaster/{id}
        method: PATCH
        cors: true
        authorizer: arn:aws:lambda:ap-northeast-2:821343553435:function:authorizer
     - http:
        path: artong/v1/memberDetail/{member_id}
        method: PATCH
        cors: true
        authorizer: arn:aws:lambda:ap-northeast-2:821343553435:function:authorizer
     - http:
        path: artong/v1/status
        method: GET
        cors: true
        authorizer: arn:aws:lambda:ap-northeast-2:821343553435:function:authorizer
     - http:
        path: artong/v1/status
        method: POST
        cors: true
        authorizer: arn:aws:lambda:ap-northeast-2:821343553435:function:authorizer
     - http:
        path: artong/v1/status/{id}
        method: PUT
        cors: true
        authorizer: arn:aws:lambda:ap-northeast-2:821343553435:function:authorizer
     - http:
        path: artong/v1/country
        method: POST
        cors: true
        authorizer: arn:aws:lambda:ap-northeast-2:821343553435:function:authorizer
    layers:
     - {Ref: NodeModulesLambdaLayer} 
    environment:
      DB_HOST: ${self:custom.DB_CONFIG.${self:provider.stage}.DB_HOST}
      DB_DATABASE: ${self:custom.DB_CONFIG.${self:provider.stage}.DB_DATABASE}
      DB_USER: ${self:custom.DB_CONFIG.${self:provider.stage}.DB_USER}
      DB_PASSWORD: ${self:custom.DB_CONFIG.${self:provider.stage}.DB_PASSWORD}

resources:
  Resources:
    GatewayResponseDefault4XX:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: 'ApiGatewayRestApi'
    GatewayResponseDefault5XX:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: DEFAULT_5XX
        RestApiId:
          Ref: 'ApiGatewayRestApi'